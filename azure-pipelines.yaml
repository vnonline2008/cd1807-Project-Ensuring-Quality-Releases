name: Azure Pipelines

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
  - main

pool: tungtt44Agent

variables:
  azureServiceConnectionId: "udacity-project3"
  # Agent Pool
  myPool: tungtt44Agent
  # Environment name
  environmentName: "azure-tungtt44-AppService"

stages:
  #--------------------------------------------#
  # BUILD STAGE
  #--------------------------------------------#
  - stage: Build_Infras
    variables:
      - group: azure-variables
    jobs:
      - job: BuildInfrastructure
        steps:
          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
            displayName: "Terrafom installation"
            inputs:
              terraformVersion: "1.2.9"

          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
            displayName: "Terrafom init"
            inputs:
              provider: "azurerm"
              command: "init"
              workingDirectory: "$(System.DefaultWorkingDirectory)/terraform/environments/test"
              backendServiceArm: "$(azureServiceConnectionId)"
              backendAzureRmResourceGroupName: "tungtt44-project3"
              backendAzureRmStorageAccountName: "tfstatetungtt44"
              backendAzureRmContainerName: "tfstate"
              backendAzureRmKey: "test.terraform.tfstate"

          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
            displayName: Terraform validate
            inputs:
              provider: "azurerm"
              command: "validate"

          # Run Terraform Apply
          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
            displayName: Terraform apply
            inputs:
              provider: "azurerm"
              command: "apply"
              workingDirectory: "$(System.DefaultWorkingDirectory)/terraform/environments/test"
              environmentServiceNameAzureRM: "$(azureServiceConnectionId)"
            env:
              TF_VAR_subscription_id: $(SUBSCRIPTION_ID)
              TF_VAR_client_id: $(CLIENT_ID)
              TF_VAR_client_secret: $(CLIENT_SECRET)
              TF_VAR_tenant_id: $(TENANT_ID)
              TF_VAR_public_key: $(PUBLIC_KEY)

        # Destroy the resources in Azure by running a separate pipeline.
        # - task: TerraformTaskV3@3
        #   displayName: Terraform destroy
        #   inputs:
        #     script: |
        #       echo "check variable $(SUBSCRIPTION_ID)"
        #     provider: 'azurerm'
        #     command: 'destroy'
        #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        #     environmentServiceNameAzureRM: '$(azureServiceConnectionId)'
        #   env:
        #     TF_VAR_subscription_id: $(SUBSCRIPTION_ID)
        #     TF_VAR_client_id: $(CLIENT_ID)
        #     TF_VAR_client_secret: $(CLIENT_SECRET)
        #     TF_VAR_tenant_id: $(TENANT_ID)
        #     TF_VAR_public_key: $(PUBLIC_KEY)

  - stage: Build_Project
    jobs:
      - job: Build_Packages
        steps:
          # FakeRestAPI - Archive
          - task: ArchiveFiles@2
            displayName: "Archive FakeRestAPI"
            inputs:
              rootFolderOrFile: "$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi"
              includeRootFolder: false
              archiveType: "zip"
              archiveFile: "$(Build.BuildId)-fakerestapi.zip"
          - publish: $(Build.BuildId)-fakerestapi.zip
            displayName: "Publish artifact FakeRestAPI"
            artifact: drop-fakerestapi

          # Selenium (UI) Test Suite - Archive the package
          - task: ArchiveFiles@2
            displayName: "Archive UI Tests"
            inputs:
              rootFolderOrFile: "$(System.DefaultWorkingDirectory)/automatedtesting/selenium"
              includeRootFolder: false
              archiveType: "zip"
              archiveFile: "$(Build.BuildId)-uitests.zip"
          - publish: $(Build.BuildId)-uitests.zip
            displayName: "Publish Selenium"
            artifact: drop-uitests

          # JMeter (Performance) Test Suite - Archive
          - task: ArchiveFiles@2
            displayName: "Archive PerformanceTestSuite"
            inputs:
              rootFolderOrFile: "$(System.DefaultWorkingDirectory)/automatedtesting/jmeter"
              includeRootFolder: false
              archiveType: "zip"
              archiveFile: "$(Build.BuildId)-perftests.zip"
          - publish: $(Build.BuildId)-perftests.zip
            displayName: "Publish JMeter Test"
            artifact: drop-perftests

  #--------------------------------------------#
  # DEPLOYMENT STAGE
  #--------------------------------------------#
  - stage: Deploy
    jobs:
      # Deploy FakeRestAPI Web App
      - deployment: FakeRestAPI
        pool: $(myPool)
        environment: $(environmentName)
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureWebApp@1
                  displayName: "Deploy Azure Web App"
                  inputs:
                    azureSubscription: $(azureServiceConnectionId)
                    appName: "tungtt44-fakerestapi-appservice"
                    appType: webApp
                    package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip

      # Selenium | Functional UI Tests
      - deployment: VMDeploy
        displayName: Selenium Tests
        environment:
          name: $(environmentName)
          resourceType: VirtualMachine
          tags: selenium
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: drop-uitests
                - task: Bash@3
                  inputs:
                    targetType: "inline"
                    script: |
                      sudo apt-get upgrade -y
                      sudo apt-get install python3-pip -y
                      sudo pip3 install --upgrade pip
                      sudo apt-get install unzip -y
                      sudo apt-get install chromium-browser -y
                      sudo apt-get install chromium-chromedriver -y
                      sudo ln -s /usr/lib/chromium-browser/chromedriver /usr/local/bin/chromedriver
                      pip3 --version
                      python3 --version
                      pip3 install selenium
                      chromium-browser --version
                      chromedriver --version
                      pwd
                      cd ~/
                      DIR=/home/udacitytungtt44/app
                      if [ ! -d "$DIR" ]; then
                          mkdir app
                      fi
                      mv /home/udacitytungtt44/azagent/_work/1/drop-uitests/$(Build.BuildId)-uitests.zip /home/udacitytungtt44/app
                      cd /home/udacitytungtt44/app
                      unzip -o $(Build.BuildId)-uitests.zip
                      export PATH=$PATH:/home/udacitytungtt44/app
                      echo "Starting Selenium Tests"
                      python3 login.py
                      DIR_LOG=$(System.DefaultWorkingDirectory)/automatedtesting/selenium
                      if [ ! -d "$DIR_LOG" ]; then
                          mkdir -p $DIR_LOG
                      fi
                      cat /home/udacitytungtt44/app/automation-test.log
                      mv /home/udacitytungtt44/app/automation-test.log $DIR_LOG
                      rm -rf $(Build.BuildId)-uitests.zip
                      echo "Completed Selenium Tests. Check selenium.log for results."
                  displayName: "Install and Run Selenium"
                - publish: "$(System.DefaultWorkingDirectory)/automatedtesting/selenium/automation-test.log"
                  displayName: "Publish Selenium Log"
                  artifact: drop-automation-log

  - stage: Testing
    pool: $(myPool)
    jobs:
      # Postman Data Validation Test Suite
      - job: Test_PostMan
        displayName: "Postman Data Validation Test Suite"
        steps:
          - task: CmdLine@2
            inputs:
              script: |
                sudo npm install -g newman
              workingDirectory: $(System.DefaultWorkingDirectory)
            displayName: Install Newman

          # Run Data Validation Tests
          - task: CmdLine@2
            displayName: Run Data Validation Tests
            continueOnError: true
            inputs:
              script: "newman run Udacity_Validation_Test.postman_collection.json -e Udacity_Test_Environment.postman_environment.json --reporters cli,junit --reporter-junit-export TEST-DataValidation.xml"
              workingDirectory: "$(System.DefaultWorkingDirectory)/automatedtesting/postman"

          # Run Regression Tests
          - task: CmdLine@2
            displayName: Run Regression Tests
            continueOnError: true
            inputs:
              script: "newman run Udacity_Regression_Test.postman_collection.json -e Udacity_Test_Environment.postman_environment.json --reporters cli,junit --reporter-junit-export TEST-Regression.xml"
              workingDirectory: "$(System.DefaultWorkingDirectory)/automatedtesting/postman"

          # Postman - Publish Results
          - task: PublishTestResults@2
            inputs:
              testResultsFormat: "JUnit"
              testResultsFiles: "**/TEST-*.xml"
              searchFolder: "$(System.DefaultWorkingDirectory)/automatedtesting/postman"
              mergeTestResults: true
              testRunTitle: "Publish Postman Test Result"

      # JMeter Performance Test Suite
      - job: Test_JMeter
        displayName: "JMeter Performance Test Suite"
        steps:
          - download: current
            artifact: drop-perftests

          - task: CmdLine@2
            inputs:
              script: |
                java --version
                wget "https://dlcdn.apache.org//jmeter/binaries/apache-jmeter-5.6.3.tgz"
                tar zxvf apache-jmeter-5.6.3.tgz
                DEST_DIR=$(System.DefaultWorkingDirectory)/jmeter
                if [ ! -d "$DEST_DIR" ]; then
                  mkdir -p $DEST_DIR
                fi
                mv $(Pipeline.Workspace)/drop-perftests/$(Build.BuildId)-perftests.zip $(System.DefaultWorkingDirectory)/jmeter
                cd $(System.DefaultWorkingDirectory)/jmeter
                unzip -o $(Build.BuildId)-perftests.zip
                rm -rf $(Build.BuildId)-perftests.zip
              workingDirectory: $(System.DefaultWorkingDirectory)
            displayName: "Install JMeter"

          - task: CmdLine@2
            inputs:
              script: |
                DEST_DIR=$(System.DefaultWorkingDirectory)/jmeter
                apache-jmeter-5.6.3/bin/jmeter -n -t $DEST_DIR/Endurance-test-suite.jmx -l "DEST_DIR"/endurance-test-result.csv -e -f -o $DEST_DIR/endurance-test-report -j $DEST_DIR/endurance-test.log
                cat $DEST_DIR/endurance-test.log
            displayName: "Run Endurance Test"

          - task: CmdLine@2
            inputs:
              script: |
                DEST_DIR=$(System.DefaultWorkingDirectory)/jmeter
                apache-jmeter-5.6.3/bin/jmeter -n -t $DEST_DIR/Stress-test-suite.jmx -l "DEST_DIR"/stress-test-result.csv -e -f -o $DEST_DIR/stress-test-report -j $DEST_DIR/stress-test.log
                cat $DEST_DIR/stress-test.log
            displayName: "Run Stress Test"

          - task: ArchiveFiles@2
            inputs:
              rootFolderOrFile: "$(System.DefaultWorkingDirectory)/jmeter/endurance-test-report"
              includeRootFolder: false
              archiveType: "zip"
              archiveFile: "$(System.DefaultWorkingDirectory)/jmeter/endurance-test-report.zip"
            displayName: "Archive Endurance Test Report"

          - task: ArchiveFiles@2
            inputs:
              rootFolderOrFile: "$(System.DefaultWorkingDirectory)/jmeter/stress-test-report"
              includeRootFolder: false
              archiveType: "zip"
              archiveFile: "$(System.DefaultWorkingDirectory)/jmeter/stress-test-report.zip"
            displayName: "Archive Stress Test Report"

          - publish: $(System.DefaultWorkingDirectory)/jmeter
            displayName: "Publish JMeter Test Report"
            artifact: drop-jmeter-reports

          - task: CmdLine@2
            inputs:
              script: |
                DEST_DIR=$(System.DefaultWorkingDirectory)/jmeter
                rm -rf $DEST_DIR
                rm -rf DEST_DIR
            displayName: "Remove All Report After Publish"
